devtools::load_all(".")
ES_bw_gain(test_df)
devtools::load_all(".")
ES_bw_gain(test_df)
usethis::use_mit_license("Janssen M. Kotah")
usethis::use_r("jk_volcano")
usethis::use_package("ggrepel")
testvol <- read.csv("D:\Documents\PhD\SynaptosomeProteomics_Visualizer\data/10M_TG C vs. TG ES.csv")
testvol <- read.csv("D:/Documents/PhD/SynaptosomeProteomics_Visualizer/data/10M_TG C vs. TG ES.csv")
testvol
head(testvol)
devtools::load_all(".")
jk_volcano(testvol, LogFC = "log2FC", FDR = "qVal")
names(testvol)
names(data.frame(testvol))
names(testvol)[names(testvol) == "log2FC"]
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE)
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, right_text = "Test")
dev.new()
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, right_text = "Test")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
new.dev()
dev.new()
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
devtools::load_all(".")
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE, FC_log = 10)
jk_volcano(testvol, fc_col = "log2FC", fdr_col = "qVal")
get_wd()
getwd()
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>%
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0.1) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
multiples <- unique(c(multiples.df1, multiples.df2))
#print(multiples)
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
#filter(Gene != "ACTN4") %>%
# mutate(delta = Log2FC.x / Log2FC.y) %>%
return()
}
a = read.csv("_testData/4M_WT control vs. TG control.csv")
a
b = read.csv("_testData/4M_WT control vs. WT es.csv")
jk_sharedDE(a,b)
library(dplyr)
jk_sharedDE(a,b)
View(a)
jk_sharedDE(a,b, fc_col="log2FC")
jk_sharedDE(a,b, fc_col="log2FC", fdr_col='qVal')
dataframe1 %>%
group_by(Gene) %>%
count()
a %>%
group_by(Gene) %>%
count()
a %>%
group_by(Gene) %>%
table()
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>% count
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0.1) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
print(length(multiples.df1))
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
multiples <- unique(c(multiples.df1, multiples.df2))
#print(multiples)
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
#filter(Gene != "ACTN4") %>%
# mutate(delta = Log2FC.x / Log2FC.y) %>%
return()
}
jk_sharedDE(a,b, fc_col="log2FC", fdr_col='qVal')
a %>%
select(Gene) %>%
table()
a %>%
select(Gene) %>%
table() %>% filter(>1)
a %>%
select(Gene) %>%
table() %>% str()
a %>%
select(Gene) %>%
table() %>% . > 1
a %>%
select(Gene) %>%
table() %>% .> 1
a %>%
select(Gene) %>%
count()
a %>%
group(Gene) %>%
count()
a %>%
group_by(Gene) %>%
count()
a %>%
group_by(Gene) %>%
count() %>% filter(n > 1)
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>% count
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0.1) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
if (length(multiples.df1) > 0){
print("Warning, dataframe 1 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
if (length(multiples.df2) > 0){
print("Warning, dataframe 1 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
multiples <- unique(c(multiples.df1, multiples.df2))
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
#filter(Gene != "ACTN4") %>%
# mutate(delta = Log2FC.x / Log2FC.y) %>%
return()
}
c = jk_sharedDE(a,b, fc_col="log2FC", fdr_col='qVal')
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>% count
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0.1) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
if (length(multiples.df1) > 0){
print("Warning, dataframe 1 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
if (length(multiples.df2) > 0){
print("Warning, dataframe 2 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
multiples <- unique(c(multiples.df1, multiples.df2))
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
#filter(Gene != "ACTN4") %>%
# mutate(delta = Log2FC.x / Log2FC.y) %>%
return()
}
c = jk_sharedDE(a,b, fc_col="log2FC", fdr_col='qVal')
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>% count
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
if (length(multiples.df1) > 0){
print("Warning, dataframe 1 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
if (length(multiples.df2) > 0){
print("Warning, dataframe 2 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
multiples <- unique(c(multiples.df1, multiples.df2))
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
#filter(Gene != "ACTN4") %>%
# mutate(delta = Log2FC.x / Log2FC.y) %>%
return()
}
c = jk_sharedDE(a,b, fc_col="log2FC", fdr_col='qVal')
#' @param fdr_thres threshold of p/q/FDR value to plot, default 0.05
#' @return A data frame with shared significant genes/proteins across two contrasts, ready for plotting 4-ways
#' @export
#' @importFrom ggplot2 aes geom_point geom_hline geom_vline element_text scale_y_continuous scale_x_continuous expansion geom_segment annotate xlab
#' @importFrom ggrepel geom_text_repel
#' @importFrom dplyr %>% count
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal") #basic volcano plot using dataframe "testvol"
#' @examples jk_sharedDE(testvol, fc_col = "log2FC", fdr_col = "qVal", genenames = FALSE) #basic volcano plot with unlabeled points
#'
#'
jk_sharedDE <- function (dataframe1,
dataframe2,
gene_col = "Gene",
fc_col = "Log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fdr_thres = 0.05,
fc_thres = 0) {
#code developed for Log2FC and FDR, so renaming everything as such; in principle works with Log10FC, or p-val instead of FDR
names(dataframe1)[names(dataframe1) == {{fc_col}}] <- "Log2FC"
names(dataframe1)[names(dataframe1) == {{fdr_col}}] <- "FDR"
names(dataframe1)[names(dataframe1) == {{gene_col}}] <- "Gene"
names(dataframe2)[names(dataframe2) == {{fc_col}}] <- "Log2FC"
names(dataframe2)[names(dataframe2) == {{fdr_col}}] <- "FDR"
names(dataframe2)[names(dataframe2) == {{gene_col}}] <- "Gene"
dataframe1 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df1}
dataframe2 %>%
group_by(Gene) %>%
count() %>% filter(n>1) %>%
dplyr::select(Gene) %>% unlist() %>%
{.->>multiples.df2}
if (length(multiples.df1) > 0){
print("Warning, dataframe 1 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
if (length(multiples.df2) > 0){
print("Warning, dataframe 2 has duplicate genes. Duplicates will be filtered in four-way dataframe.")
}
multiples <- unique(c(multiples.df1, multiples.df2))
dataframe1 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_a}
dataframe2 %>%
filter(!Gene %in% multiples) %>%
filter(abs(Log2FC) > fc_thres,
FDR < fdr_thres) %>%
dplyr::select(Gene) %>% unlist() %>% {.->>sig_prot_b}
unique(c(sig_prot_a, sig_prot_b)) %>% {.->> sig_prot_filter}
joined_df_name <- data.frame()
dataframe1 %>%
filter(Gene %in% sig_prot_filter) %>%
dplyr::select(Gene, Log2FC, FDR, Direction) %>%
rbind(joined_df_name) %>%
inner_join(dataframe2, by = c("Gene" = "Gene")) %>%
dplyr::select(Gene, Log2FC.x, Log2FC.y, FDR.x, FDR.y, Direction.x, Direction.y) %>%
return()
}
source("D:/Documents/antiboydy/antiboydy/R/jk_4ways.R")
library(roxygen2)
roxygenise()
