)
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_X"), color = color_x, size = point_size) +
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_Y"), color = color_y, size = point_size) +
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_Both"), color = color_both, size = point_size) +
# scale_color_manual(values = c(color_x,
#                               color_y,
#                               color_both,
#                               color_ignore),
#                    labels = c(paste0("Sig. in ", contrast_1, " (n=", n_sig_x, ")"),
#                               paste0("Sig. in ", contrast_2," (n=",n_sig_y,")"),
#                               paste0("Sig. in both (n=",n_sig_both,")"),
#                               "")
#)
}
if(color_mode=="quadrants") {
# if (nrow(fourway_df %>% filter(color_quadrants == "Ignore"))>0){
#   plot_fourway = plot_fourway +geom_point(data = subset(fourway_df, color_quadrants == "Ignore"), color = color_ignore, size = point_size)
# }
plot_fourway = plot_fourway +
# geom_point(data = subset(fourway_df, color_quadrants == "Up.X"), color = color_x_up, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Up.Y"), color = color_y_up, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Down.X"), color = color_x_down, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Down.Y"), color = color_y_down, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Sig_in_Both"), color = color_both, size = point_size) +
geom_point(aes(color=color_quadrants),size = point_size) +
scale_color_manual(values = c(color_ignore,
color_x_up,
color_y_up,
color_x_down,
color_y_down,
color_both
),
labels = c("Below FC/FDR thresholds",
paste0("Up in ", right_text, " (n=", n_sig_x_up, ")"),
paste0("Up in ", up_text," (n=",n_sig_y_up,")"),
paste0("Down in ", right_text, " (n=", n_sig_x_down, ")"),
paste0("Down in ", up_text," (n=",n_sig_y_down,")"),
paste0("Sig. in both (n=",n_sig_both,")")
)
)
}
if (color_axes==TRUE){
plot_fourway = plot_fourway +
#x-axis
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = (min_lim_x), xend = 0), size=2, color = color_x_down) +
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = 0, xend = max_lim_x ), size=2, color = color_x_up) +
#y-axis
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = (min_lim_y), yend = 0), size=2, color = color_y_down) +
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = 0, yend = max_lim_y ), size=2, color = color_y_up)
}
if (genenames == TRUE){
if(label_shared_sig == TRUE){
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(SigBothFilter == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
} else {
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(Label == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
}
}
plot_fourway <- plot_fourway +
xlab(paste0(contrast_1)) +
ylab(paste0(contrast_2)) +
ggtitle(paste0(plot_title))
return(plot_fourway)
}
}
jk_4wayplot(a, b, fc_col="log2FC", fc_thres = 0.2, fdr_col = "qVal", )
jk_4wayplot(a, b, fc_col="log2FC", fc_thres = 0.2, fdr_col = "qVal", color_mode = 'overlap')
jk_4wayplot <- function(dataframe1,
dataframe2,
fc_col = "log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fc_thres = 0.01,
fdr_thres = 0.05,
plot_fourway = TRUE,
genenames = TRUE,
label_shared_sig = FALSE,
color_mode = "quadrants", #overlap or quadrants
symmetry = TRUE, #for axis symmetry
color_axes = TRUE,
color_x_up = "#4d528f",
color_x_down = "#a3a1c3",
color_y_up = "#de5b6c",
color_y_down = "#f3acb0",
color_x = "#9A9ABC",
color_y = "#F6A6A9",
color_both = "black",
color_ignore = "grey",
max_overlaps = 20,
contrast_1 = "Contrast1_Name",
contrast_2 = "Contrast2_Name",
label_size = 2.5, #gene name size
right_text = "test1_up",
left_text = "test1_down",
up_text = "test2_up",
down_text = "test2_down",
segment_trans = 0.3,
unity_alpha =1,
aspect = 12/16,
point_size = 2,
plot_title = "Significantly altered genes/proteins in both contrasts") {
if (!color_mode %in% c("overlap", "quadrants")) stop("color_mode can only be either 'overlap' or 'quadrants'")
jk_sharedDE(dataframe1, dataframe2, fc_col = fc_col, fdr_col = fdr_col) %>%
mutate(Sig.x = FDR.x < fdr_thres,
Sig.y = FDR.y < fdr_thres) %>%
mutate(color_overlap = case_when(Sig.x == TRUE & Sig.y == FALSE & abs(Log2FC.x) > fc_thres ~ "Sig_in_X",
Sig.x == FALSE & Sig.y == TRUE & abs(Log2FC.y) > fc_thres ~ "Sig_in_Y",
Sig.x == TRUE & Sig.y == TRUE & abs(Log2FC.x) > fc_thres & abs(Log2FC.y) > fc_thres  ~ "Sig_in_Both",
T ~ "Ignore")) %>%
mutate(color_quadrants = case_when(Sig.x == TRUE & Sig.y == FALSE & Log2FC.x > fc_thres ~ "Up.X",
Sig.x == TRUE & Sig.y == FALSE & Log2FC.x < -1*fc_thres ~ "Down.X",
Sig.y == TRUE & Sig.x == FALSE & Log2FC.y > fc_thres ~ "Up.Y",
Sig.y == TRUE & Sig.x == FALSE & Log2FC.y < -1*fc_thres ~ "Down.Y",
Sig.x == TRUE & Sig.y == FALSE & Log2FC.x > fc_thres ~ "Up.X",
Sig.x == TRUE & Sig.y == TRUE & abs(Log2FC.x) > fc_thres & abs(Log2FC.y) > fc_thres ~ "Sig_in_Both",
T ~ "Ignore",
abs(Log2FC.x) < fc_thres & abs(Log2FC.y) < fc_thres ~ "Ignore")
) %>%
mutate(SigBothFilter = color_quadrants == "Sig_in_Both") %>%
mutate(color_overlap = factor(color_overlap, levels=c("Ignore",
"Sig_in_X",
"Sig_in_Y",
"Sig_in_Both"
))
) %>%
mutate(color_quadrants = factor(color_quadrants, levels = c("Ignore",
"Up.X",
"Up.Y",
"Down.X",
"Down.Y",
"Sig_in_Both"
))
) %>%
mutate(Label = color_quadrants %in% c("Up.X", "Down.X", "Up.Y", "Down.Y")) -> fourway_df
if(color_mode == "overlap"){
fourway_df = fourway_df %>% arrange(color_overlap) #sort so that 'ignored' points plotted first
}
if(color_mode == "quadrants"){
fourway_df = fourway_df %>% arrange(color_quadrants) #sort so that 'ignored' points plotted first
}
if(plot_fourway == FALSE){
return(fourway_df)
} else{
fourway_df %>% dplyr::select(Log2FC.x) %>% max() -> four_way_plot_max.x
fourway_df %>% dplyr::select(Log2FC.y) %>% max() -> four_way_plot_max.y
fourway_df %>% dplyr::select(Log2FC.x) %>% min() -> four_way_plot_min.x
fourway_df %>% dplyr::select(Log2FC.y) %>% min() -> four_way_plot_min.y
fourway_df %>% filter(color_overlap == "Sig_in_Both") %>% nrow() -> n_sig_both
fourway_df %>% filter(color_overlap == "Sig_in_X") %>% nrow() -> n_sig_x
fourway_df %>% filter(color_overlap == "Sig_in_Y") %>% nrow() -> n_sig_y
fourway_df %>% filter(color_quadrants == "Up.X") %>% nrow() -> n_sig_x_up
fourway_df %>% filter(color_quadrants == "Down.X") %>% nrow() -> n_sig_x_down
fourway_df %>% filter(color_quadrants == "Up.Y") %>% nrow() -> n_sig_y_up
fourway_df %>% filter(color_quadrants == "Down.Y") %>% nrow() -> n_sig_y_down
four_way_plot_min <- min(four_way_plot_min.x, four_way_plot_min.y)
four_way_plot_max <- max(four_way_plot_max.x, four_way_plot_max.y)
xmargin.max =  four_way_plot_max.x + ((four_way_plot_max.x - four_way_plot_min.x)/15)
xmargin.min = four_way_plot_min.x - ((four_way_plot_max.x - four_way_plot_min.x)/15)
ymargin.max =  four_way_plot_max.y + ((four_way_plot_max.y - four_way_plot_min.y)/15)
ymargin.min = four_way_plot_min.y - ((four_way_plot_max.x - four_way_plot_min.x)/15)
#for symmetry, default
abs_lim_x = max(abs(xmargin.min), abs(xmargin.max))
abs_lim_y = max(abs(ymargin.min), abs(ymargin.max))
max_lim_x = abs_lim_x
min_lim_x = -1*abs_lim_x
max_lim_y = abs_lim_y
min_lim_y = -1*abs_lim_y
if (symmetry ==FALSE){
max_lim_x = xmargin.max
min_lim_x = xmargin.min
max_lim_y = ymargin.max
min_lim_y = ymargin.min
}
plot_fourway <- fourway_df %>%
ggplot(., aes(x=Log2FC.x, y=Log2FC.y, label=Gene)) +
geom_hline(yintercept = (fc_thres), color="#898989", linetype = "dashed") +
geom_hline(yintercept = -1*(fc_thres), color="#898989", linetype = "dashed") +
geom_vline(xintercept = (fc_thres), color="#898989", linetype = "dashed") +
geom_vline(xintercept = -1*(fc_thres), color="#898989", linetype = "dashed") +
geom_abline(intercept=0, slope=1, color="#898989", alpha = unity_alpha) +
xlim(c(four_way_plot_min,four_way_plot_max)) +
ylim(c(four_way_plot_min,four_way_plot_max)) +
theme_classic() +
theme(legend.title = element_blank(),
aspect.ratio = aspect,
plot.title = element_text(hjust = 0.5, face = "bold")) +
scale_y_continuous(expand = expansion(mult = c(0,0),
add = c(0,0)), #c(0,0),
limits = c(min_lim_y, max_lim_y)) +
scale_x_continuous(expand = expansion(mult = c(0,0),
add = c(0,0)), #c(0,0),
limits = c(min_lim_x, max_lim_x))
if(color_mode == "overlap"){
# if (nrow(fourway_df %>% filter(color_overlap == "Ignore"))>0){
#   plot_fourway = plot_fourway +geom_point(data = subset(fourway_df, color_overlap == "Ignore"), color = color_ignore, size = point_size)
# }
plot_fourway = plot_fourway +
geom_point(aes(color=color_overlap),size = point_size) +
scale_color_manual(values = c(color_ignore,
color_x,
color_y,
color_both
),
labels = c("Below FC/FDR thresholds",
paste0("Sig. in ", contrast_1, " (n=", n_sig_x, ")"),
paste0("Sig. in ", contrast_2," (n=",n_sig_y,")"),
paste0("Sig. in both (n=",n_sig_both,")")
)
)
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_X"), color = color_x, size = point_size) +
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_Y"), color = color_y, size = point_size) +
# geom_point(data = subset(fourway_df, color_overlap == "Sig_in_Both"), color = color_both, size = point_size) +
# scale_color_manual(values = c(color_x,
#                               color_y,
#                               color_both,
#                               color_ignore),
#                    labels = c(paste0("Sig. in ", contrast_1, " (n=", n_sig_x, ")"),
#                               paste0("Sig. in ", contrast_2," (n=",n_sig_y,")"),
#                               paste0("Sig. in both (n=",n_sig_both,")"),
#                               "")
#)
}
if(color_mode=="quadrants") {
# if (nrow(fourway_df %>% filter(color_quadrants == "Ignore"))>0){
#   plot_fourway = plot_fourway +geom_point(data = subset(fourway_df, color_quadrants == "Ignore"), color = color_ignore, size = point_size)
# }
plot_fourway = plot_fourway +
# geom_point(data = subset(fourway_df, color_quadrants == "Up.X"), color = color_x_up, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Up.Y"), color = color_y_up, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Down.X"), color = color_x_down, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Down.Y"), color = color_y_down, size = point_size) +
# geom_point(data = subset(fourway_df, color_quadrants == "Sig_in_Both"), color = color_both, size = point_size) +
geom_point(aes(color=color_quadrants),size = point_size) +
scale_color_manual(values = c(color_ignore,
color_x_up,
color_y_up,
color_x_down,
color_y_down,
color_both
),
labels = c("Below FC/FDR thresholds",
paste0("Up in ", right_text, " (n=", n_sig_x_up, ")"),
paste0("Up in ", up_text," (n=",n_sig_y_up,")"),
paste0("Down in ", right_text, " (n=", n_sig_x_down, ")"),
paste0("Down in ", up_text," (n=",n_sig_y_down,")"),
paste0("Sig. in both (n=",n_sig_both,")")
)
)
}
if (color_axes==TRUE){
plot_fourway = plot_fourway +
#x-axis
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = (min_lim_x), xend = 0), size=2, color = color_x_down) +
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = 0, xend = max_lim_x ), size=2, color = color_x_up) +
#y-axis
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = (min_lim_y), yend = 0), size=2, color = color_y_down) +
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = 0, yend = max_lim_y ), size=2, color = color_y_up)
}
if (genenames == TRUE){
if(label_shared_sig == TRUE){
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(SigBothFilter == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
} else {
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(Label == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
}
}
plot_fourway <- plot_fourway +
xlab(paste0(contrast_1)) +
ylab(paste0(contrast_2)) +
ggtitle(paste0(plot_title))
return(plot_fourway)
}
}
jk_4wayplot(a, b, fc_col="log2FC", fc_thres = 0.2, fdr_col = "qVal", color_mode = 'overlap')
jk_4wayplot <- function(dataframe1,
dataframe2,
fc_col = "log2FC", #fold change column
fdr_col = "FDR", #p or q value column
fc_thres = 0.01,
fdr_thres = 0.05,
plot_fourway = TRUE,
genenames = TRUE,
label_shared_sig = FALSE,
color_mode = "overlap", #overlap or quadrants
symmetry = TRUE, #for axis symmetry
color_axes = TRUE,
color_x_up = "#4d528f",
color_x_down = "#a3a1c3",
color_y_up = "#de5b6c",
color_y_down = "#f3acb0",
color_x = "#9A9ABC",
color_y = "#F6A6A9",
color_both = "black",
color_ignore = "grey",
max_overlaps = 20,
contrast_1 = "Contrast1_Name",
contrast_2 = "Contrast2_Name",
label_size = 2.5, #gene name size
right_group = "group1",
up_group = "group2",
segment_trans = 0.3,
unity_alpha =1,
aspect = 12/16,
point_size = 2,
plot_title = "Significantly altered genes/proteins in both contrasts") {
if (!color_mode %in% c("overlap", "quadrants")) stop("color_mode can only be either 'overlap' or 'quadrants'")
jk_sharedDE(dataframe1, dataframe2, fc_col = fc_col, fdr_col = fdr_col) %>%
mutate(Sig.x = FDR.x < fdr_thres,
Sig.y = FDR.y < fdr_thres) %>%
mutate(color_overlap = case_when(Sig.x == TRUE & Sig.y == FALSE & abs(Log2FC.x) > fc_thres ~ "Sig_in_X",
Sig.x == FALSE & Sig.y == TRUE & abs(Log2FC.y) > fc_thres ~ "Sig_in_Y",
Sig.x == TRUE & Sig.y == TRUE & abs(Log2FC.x) > fc_thres & abs(Log2FC.y) > fc_thres  ~ "Sig_in_Both",
T ~ "Ignore")) %>%
mutate(color_quadrants = case_when(Sig.x == TRUE & Sig.y == FALSE & Log2FC.x > fc_thres ~ "Up.X",
Sig.x == TRUE & Sig.y == FALSE & Log2FC.x < -1*fc_thres ~ "Down.X",
Sig.y == TRUE & Sig.x == FALSE & Log2FC.y > fc_thres ~ "Up.Y",
Sig.y == TRUE & Sig.x == FALSE & Log2FC.y < -1*fc_thres ~ "Down.Y",
Sig.x == TRUE & Sig.y == FALSE & Log2FC.x > fc_thres ~ "Up.X",
Sig.x == TRUE & Sig.y == TRUE & abs(Log2FC.x) > fc_thres & abs(Log2FC.y) > fc_thres ~ "Sig_in_Both",
T ~ "Ignore",
abs(Log2FC.x) < fc_thres & abs(Log2FC.y) < fc_thres ~ "Ignore")
) %>%
mutate(SigBothFilter = color_quadrants == "Sig_in_Both") %>%
mutate(color_overlap = factor(color_overlap, levels=c("Ignore",
"Sig_in_X",
"Sig_in_Y",
"Sig_in_Both"
))
) %>%
mutate(color_quadrants = factor(color_quadrants, levels = c("Ignore",
"Up.X",
"Up.Y",
"Down.X",
"Down.Y",
"Sig_in_Both"
))
) %>%
mutate(Label = color_quadrants %in% c("Up.X", "Down.X", "Up.Y", "Down.Y")) -> fourway_df
if(color_mode == "overlap"){
fourway_df = fourway_df %>% arrange(color_overlap) #sort so that 'ignored' points plotted first
}
if(color_mode == "quadrants"){
fourway_df = fourway_df %>% arrange(color_quadrants) #sort so that 'ignored' points plotted first
}
if(plot_fourway == FALSE){
return(fourway_df)
} else{
fourway_df %>% dplyr::select(Log2FC.x) %>% max() -> four_way_plot_max.x
fourway_df %>% dplyr::select(Log2FC.y) %>% max() -> four_way_plot_max.y
fourway_df %>% dplyr::select(Log2FC.x) %>% min() -> four_way_plot_min.x
fourway_df %>% dplyr::select(Log2FC.y) %>% min() -> four_way_plot_min.y
fourway_df %>% filter(color_overlap == "Sig_in_Both") %>% nrow() -> n_sig_both
fourway_df %>% filter(color_overlap == "Sig_in_X") %>% nrow() -> n_sig_x
fourway_df %>% filter(color_overlap == "Sig_in_Y") %>% nrow() -> n_sig_y
fourway_df %>% filter(color_quadrants == "Up.X") %>% nrow() -> n_sig_x_up
fourway_df %>% filter(color_quadrants == "Down.X") %>% nrow() -> n_sig_x_down
fourway_df %>% filter(color_quadrants == "Up.Y") %>% nrow() -> n_sig_y_up
fourway_df %>% filter(color_quadrants == "Down.Y") %>% nrow() -> n_sig_y_down
four_way_plot_min <- min(four_way_plot_min.x, four_way_plot_min.y)
four_way_plot_max <- max(four_way_plot_max.x, four_way_plot_max.y)
xmargin.max =  four_way_plot_max.x + ((four_way_plot_max.x - four_way_plot_min.x)/15)
xmargin.min = four_way_plot_min.x - ((four_way_plot_max.x - four_way_plot_min.x)/15)
ymargin.max =  four_way_plot_max.y + ((four_way_plot_max.y - four_way_plot_min.y)/15)
ymargin.min = four_way_plot_min.y - ((four_way_plot_max.x - four_way_plot_min.x)/15)
#for symmetry, default
abs_lim_x = max(abs(xmargin.min), abs(xmargin.max))
abs_lim_y = max(abs(ymargin.min), abs(ymargin.max))
max_lim_x = abs_lim_x
min_lim_x = -1*abs_lim_x
max_lim_y = abs_lim_y
min_lim_y = -1*abs_lim_y
if (symmetry ==FALSE){
max_lim_x = xmargin.max
min_lim_x = xmargin.min
max_lim_y = ymargin.max
min_lim_y = ymargin.min
}
plot_fourway <- fourway_df %>%
ggplot(., aes(x=Log2FC.x, y=Log2FC.y, label=Gene)) +
geom_hline(yintercept = (fc_thres), color="#898989", linetype = "dashed") +
geom_hline(yintercept = -1*(fc_thres), color="#898989", linetype = "dashed") +
geom_vline(xintercept = (fc_thres), color="#898989", linetype = "dashed") +
geom_vline(xintercept = -1*(fc_thres), color="#898989", linetype = "dashed") +
geom_abline(intercept=0, slope=1, color="#898989", alpha = unity_alpha) +
xlim(c(four_way_plot_min,four_way_plot_max)) +
ylim(c(four_way_plot_min,four_way_plot_max)) +
theme_classic() +
theme(legend.title = element_blank(),
aspect.ratio = aspect,
plot.title = element_text(hjust = 0.5, face = "bold")) +
scale_y_continuous(expand = expansion(mult = c(0,0),
add = c(0,0)), #c(0,0),
limits = c(min_lim_y, max_lim_y)) +
scale_x_continuous(expand = expansion(mult = c(0,0),
add = c(0,0)), #c(0,0),
limits = c(min_lim_x, max_lim_x))
if(color_mode == "overlap"){
plot_fourway = plot_fourway +
geom_point(aes(color=color_overlap),size = point_size) +
scale_color_manual(values = c(color_ignore,
color_x,
color_y,
color_both
),
labels = c("Below FC/FDR thresholds",
paste0("Sig. in ", contrast_1, " (n=", n_sig_x, ")"),
paste0("Sig. in ", contrast_2," (n=",n_sig_y,")"),
paste0("Sig. in both (n=",n_sig_both,")")
)
)
}
if(color_mode=="quadrants") {
plot_fourway = plot_fourway +
geom_point(aes(color=color_quadrants),size = point_size) +
scale_color_manual(values = c(color_ignore,
color_x_up,
color_y_up,
color_x_down,
color_y_down,
color_both
),
labels = c("Below FC/FDR thresholds",
paste0("Up in ", right_group, " (n=", n_sig_x_up, ")"),
paste0("Up in ", up_group," (n=",n_sig_y_up,")"),
paste0("Down in ", right_group, " (n=", n_sig_x_down, ")"),
paste0("Down in ", up_group," (n=",n_sig_y_down,")"),
paste0("Sig. in both (n=",n_sig_both,")")
)
)
}
if (color_axes==TRUE){
plot_fourway = plot_fourway +
#x-axis
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = (min_lim_x), xend = 0), size=2, color = color_x_down) +
geom_segment(aes(y = min_lim_y, yend = min_lim_y, x = 0, xend = max_lim_x ), size=2, color = color_x_up) +
#y-axis
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = (min_lim_y), yend = 0), size=2, color = color_y_down) +
geom_segment(aes(x = min_lim_x, xend = min_lim_x, y = 0, yend = max_lim_y ), size=2, color = color_y_up)
}
if (genenames == TRUE){
if(label_shared_sig == TRUE){
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(SigBothFilter == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
} else {
plot_fourway <- plot_fourway + geom_text_repel(data = fourway_df,
aes(x = Log2FC.x,
y = Log2FC.y,
fontface = "bold",
label = ifelse(Label == TRUE , Gene,"")),
size=label_size,
max.overlaps = max_overlaps, #set to inf
segment.alpha = segment_trans,
direction = "both",
force = 15,
min.segment.length = 0.25)
}
}
plot_fourway <- plot_fourway +
xlab(paste0(contrast_1)) +
ylab(paste0(contrast_2)) +
ggtitle(paste0(plot_title))
return(plot_fourway)
}
}
jk_4wayplot(a, b, fc_col="log2FC", fc_thres = 0.2, fdr_col = "qVal", color_mode = 'overlap')
jk_4wayplot(a, b, fc_col="log2FC", fc_thres = 0.2, fdr_col = "qVal", color_mode = 'quadrants')
